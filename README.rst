============================================
Analysis of CD8 T-cell epitopes in influenza
============================================

.. contents::

Summary
----------
This is an analysis of T-cell epitopes in influenza A. Performed by Heather Machkovech in the `Bloom lab`_.

Software used
---------------
* `Python`_ version 2.7.3

* `Biopython`_ version 1.58

* `EMBOSS needle`_ version 6.6.0

* `RAxML`_ version 8.1.2

* `Path-O-Gen`_ version 1.4

* `epitopefinder`_ version 0.11

Main script
--------------
* ``mainepitopecomparison.py`` : main `Python`_ script runs all subscripts below

Subscripts
-------------
* ``parse_sequences.py`` : `Python`_ script 
 
* ``select_sequences.py`` : `Python`_ script that is specific to each segment lineage, located in segment folder

* ``sbatchepitopes.py`` : `Python`_ script that runs epitope finder to find and align T-cell epitopes to influenza sequences

* ``plotepitopesperprotein.py``: `Python`_ script that generates two differnt types of bar graphs:
    
    - summary plot of number of epitopes in each protein (HA, NA, NP, PA, PB1, PB2, NS1, NS2, M1, and M2)

    - plot of number of epitopes along the protein (NP and M1)

* ``CreateSeparateXML.py`` : `Python`_ script that generates XML files to run BEAST for M1 and NP

* ``sbatchseparatephylogenies.py`` : `Python`_ script that runs BEAST to create phylogenies for M1 and NP

* ``MakeMaxCladeCred.py`` : `Python`_ script that creates maximum clade credibility trees from beast output

* ``calcaveragemutationpersite.py`` : `Python`_ script that uses the BEAST output to calculate the average number of mutations that occur at each site of the protein.

* ``calcavemutationantigenicnonantigenic.py`` : `Python`_ script that calculates the average epitope mutation rate to non-epitope mutation rate 

* ``plotavemutationepitopetononepitope.py`` : `Python`_ script that plots the average epitope mutation rate to non-epitope mutation rate

* ``fanalysis.py`` :  `Python`_ script that calculates the average epitope change per mutation

* ``fplots.py`` : `Python`_ script that generates plots from the output of ``fanalysis.py``

* ``simplifytree.py`` : `Python`_ script that simplifies BEAST maxcladecredibility tree to input to datamonkey

* ``dndsanalysis.py`` :  `Python`_ script for analysis and plotting of dnds data




* ``sequences.fasta`` : file containing sequences for 1 segment. Sequences are located in segment folder and were obtained from the `Influenza Virus Resource`_ with the following search parameters:

    - sequence type: coding region

    - type: A

    - host: human

    - country: any

    - segment: appropriate segment

    - subtype: any

    - full-length only

    - exclude pandemic H1N1

    - exclude lab strains

    - include lineage defining strains

    - include FLU project

    - include vaccine strains

    - include mixed subtype

    - coding region

    - FASTAdefline: ``>{year}/{month}/{day}{accession}{strain}{segname}{serotype}``

    - Search performed on Sept-10-2014 for HA, NA, NP, PA, PB1, and PB2. Sept-24-2014 for NS1, NS2, M1, and M2.


* ``reference_sequence.fasta`` : file containing reference sequence for given segment, located in segment folder. File is used as reference for pairwise alignments.

Output files
-------------
* ``parsed.fasta`` : file containing parsed segment lineage sequences. Output to appropriate segment folder

* ``parsed_translated.fasta`` : file containing translated sequences of ``sequences_parsed.fasta``. Output to appropriate segment folder

* ``reference_sequence_translated.fasta`` : file containing translated ``reference_sequence.fasta``

* ``aligned.fasta``: file containing initial pairwise alignments of sequences in ``parsed_translated.fasta`` to ``reference_sequence_translated.fasta``

* ``prot_aligned.fasta``: file containing final alignments 

* ``cds_aligned.fasta`` file containing cDNA alignments

* ``RAxML_bestTree.prelimTree`` file containing `RAxML`_ generated tree

Running the analysis
---------------------
The analysis in this directory can be regenerated by running the master script ``mainepitopecomparison.py`` in the commandline using::

    python mainepitopecomparison.py

Steps in the analysis
-----------------------
Here are the steps in the analysis

Creation of sequence alignments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The steps for parsing ``sequences.fasta`` are as follows. All outputs are to appropriate segment lineage folder.

1. ``parse_sequences.py`` runs ``select_sequences.py`` in each folder. ``select_sequences.py`` is specific to each folder and does the following:

    1. Select lineages as follows. These selections are based on the history of human influenza (prior to 2009 pandemic) described by `Neumann et al 2009`_:

        - exclude if: unknown in year

        - NP, PB2, PA, NS1, NS2, M1, M2:

            - include if:

                - H1N1 1918 to 1957, 1977 to 2008

                - H2N2 1957 to 1968

                - H3N2 1968 to 2013

        - NA - N1, HA - H1, PB1 - P1:

            - include if:

                - H1N1 1918 to 1957


    2. Select for length - sequences must be at least 90 % in length of full length sequence. Output is written to ``parsed.fasta``

2. ``parse_sequences.py`` then does the following:

    1. Exclude sequences that contain ambiguous characters

    2. Exclude known anomalies from `Krasnitz et al 2008`_, JDB (Jesse D Bloom), and HMM (Heather M Machkovech).

    3. Exclude identical sequences

    4. Keep a max of 3 seq/yr/subtype and overwrites output to ``parsed.fasta`` 

    5. Translate sequences (``parsed.fasta``, ``reference_sequence.fasta``) to protein, output files are ``parsed_translated.fasta`` and ``reference_sequence_translated.fasta``

    6. Perform pairwise alignments using `EMBOSS needle`_ of ``parsed.fasta`` to ``reference_sequence.fasta``, output file is ``aligned.fasta``

        - ``reference_sequence.fasta`` is A/Aichi/2/1968 (H3N2) for NP, PA, PB1, PB2, NS1, NS2, M1, and M2

        - ``reference_sequence.fasta`` is A/Brevig Mission/1/1918 (H1N1) for HA - H1 and NA - N1 

    7. Fasta deflines have spaces and the following characters removed ``( ' : , ) ;`` (which are not allowed in `RAxML`_)

    9. In order to ensure concordance with the molecular clock, 24 yrs is subtracted from H1N1 from 1977 onward. This is based on the analysis by `dos Reis et al 2009`_, which concludes that seasonal H1N1 arose from a virus frozen for 24 years.

    10. Pairwise alignments have gaps relative to reference sequence removed, and both protein written as ``prot_aligned.fasta`` and cDNA written as ``cds_aligned.fasta`` are returned.

Molecular clock analysis
~~~~~~~~~~~~~~~~~~~~~~~~~

    1. A quick phylogenetic tree (no date stamping) is built using `RAxML`_. The output is called ``RAxML_bestTree.prelimTree`` located in a subfolder called ``RAxML_output``.  This tree is used to visually check for potential outliers to the molecular clock using `Path-O-Gen`_. Clear outliers are removed and added to ``HMM_anomalies.txt``. This analysis is repeated until there are no outliers. 

Alignment of T-cell epitopes to influenza sequences
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. ``sbatchepitopes.py`` uses epitope finder to align experimentally determined influenza CD8 T-cell epitopes from Immune epitope databas are aligned to influenza proteins. This analysis is done for NS1, NS2, H1 HA, N1 NA, PB1, P1 PB2, M1, M2, PA, and NP. Human and swine influenza sequences are combined for the analysis.  Peptides are selected for length 8-12 amino acids and redundant MHCgroup peptides are purged. 

Input files
-------------
*``prot_aligned.fasta`` : human and swine influenza sequences used to align epitopes, a file exists for each protein
*``IEDB_Influenza_Tcell_compact_2014-10-09.csv``: influenza T-cell epitopes frome Immune Epitope Database
*``supertype_classification.txt`` : MHC classification text

Output files
--------------
*``epitopefinderinfile.txt`` : input file with required parameters to run epitope finder
*``runepitopefinder.sbatch`` : sbatch file to run epitope finder
*``combinedepitopeslist.csv`` : file containing epitope entries from ``IEDB_Influenza_Tcell_compact_2014-10-09.csv`` that align to a protein
*``combinedepitopesbysite.csv`` : file containing the number of unique epitopes that map to each amino acid site of a protein. 

Graph epitopes per protein
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. ``plotepitopesperprotein.py`` generates two different types of bar graphs: a summary plot of number of epitopes in each protein and a plot for each protein of the number of epitopes at each amino acid along the protein. 

Input files
-------------
*``combinedepitopesbysite.csv`` : : file containing the number of unique epitopes that map to each amino acid site of a protein. 
Output files
--------------
*``epitopespersite.pdf`` : summary plot of number of epitopes per protein
*``numberepitopesperprotein.pdf`` epitopes at each amino acid along the protein.

Create phylogenies using BEAST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. ``CreateSeparateXML.py`` creates XML input BEAST files for human and swine M1 and NP sequences. Include details about parameters?

Input files
-------------
*``combined_prot_aligned.fasta`` : 1 file for each protein that contains aligned human and swine influenza protein sequences used for building trees
*``tail.xml`` : bottom portion of XML that contains parameters for BEAST

Output files
-------------
*``head.xml`` : 1 file generated for each protein containing top portion of XML file
*``beastinfile.xml`` : 1 complete XML file generated for each protein 


2. Run BEAST with ``sbatchseparatephylogenies.py`` for human and swine M1 and NP using the XML files generated from the previous step

Input files
-------------
*``beastinfile.xml`` : input file to run BEAST

Output files
--------------
*``run.sbatch`` : sbatch file to run BEAST
*``prot_aligned.trees`` : BEAST output file containing thinned trees 
*``prot_aligned.log`` : BEAST log output

3. Create maximum clade credibility tree with ``MakeMaxCladeCred.py`` assuming 10% burnin

Input files 
------------
*``prot_aligned.trees`` : BEAST file containing thinned trees 

Output files
--------------
*``maxcladecredibility.tre`` : maximum clade credibility tree

dnds analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. The BEAST maxcladecredibility tree does not work as is for datamonkey,an online server for dnds analysis. Simplify the BEAST maxcladecredibility tree using ``simplifytree.py`` for human and swine influenza M1 and NP for input into datamonkey. 

Input files 
------------
*``maxcladecredibility.tre`` : maximum clade credibility tree
*``cds_aligned.fasta`` : aligned cDNA sequences used for making tree file

Output files
--------------
*``testsimplenexus.tre`` : output nexus tree for datamonkey

2. Manual input of human and swine cDNA sequences (neighborjoining tree used) and simplified nexus trees for NP and M1 to data monkey. Performed FUBAR and FEL analysis and saved output. 

Input files
------------
*``cds_aligned.fasta`` : aligned cDNA sequences used for datamonkey 
*``testsimplenexus.tre`` : nexus tree for datamonkey

Output files
---------------
*``host_protein_FEL_report.csv`` : FEL report named for host and protein, located in dnds/user_tree and dnds/aligned_seq
*``host_protein_FUBAR_report.csv`` : FUBAR report named for host and protein, located in dnds/user_tree and dnds/aligned_seq

3.``dndsanlaysis.py`` takes the output from datamonkey and calculates dnds () and generates summary plots to compare epitope vs nonepitope sites. It also fixes the csv file so that the newline character is \n instead of \r. For both FUBAR and FEL a summary plot of the proportion of sites with dnds greater than 1 for epitope vs nonepitope sites. Another type of plot is also created for each protein that displays the cumulative proportion of dnds values.

Input files
------------
*``host_protein_FEL_report.csv`` : FEL report named for host and protein, located in dnds/user_tree and dnds/aligned_seq
*``host_protein_FUBAR_report.csv`` : FUBAR report named for host and protein, located in dnds/user_tree and dnds/aligned_seq

Output files
---------------
*``host_protein_FEL_report_fix.csv`` : fixed FEL report named for host and protein, located in dnds/user_tree and dnds/aligned_seq
*``host_protein_FUBAR_report_fix.csv`` : fixed FUBAR report named for host and protein, located in dnds/user_tree and dnds/aligned_seq
*``input_protein_dndstype_cumulativedensity_dnds.pdf``: cumulative density plot located in plots/dnds/, input is alignedseq or usertree, protein is M1 or NP, dndstype is FEL or FUBAR
*``dndstype_input_proportionhighdnds.pdf`` : plot of proportion of epitope sites or non-epitope sites that have dnds >1, located in dnds/, input is alignedseq or usertree, dndstype is FEL or FUBAR


Calculate the average mutation rate at each amino acid 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. We calculated the average mutaiton rate at each amino acid in M1 and NP in human and swine influenza using the BEAST trees output. This analysis was done for both the entire tree as well as for just the trunk of the tree. This analysis was done assuming a 10% burnin. ``calcaveragemutationpersite.py`` does this.

Input files
------------
*``prot_aligned.trees`` : BEAST tree file, located in host/protein/, where host is human or swine and protein is NP or M1

Output files
---------------
*``typeavemutationpersite.csv`` : output file containing the average mutation rate for each amino acid, located in /host/protein/, where protein is M1 or NP, host is human or swine, type is tree or trunk

Analysis of adaptive evolution in t-cell epitopes vs non-epitopes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. To see if t-cell epitopes were under selection, we defined a statistic (f) that is the average epitope change per mutation for NP and M1 human and swine, tree and trunk. This is done with the the ``calcaveragemutationpersite.py`` script.
Using the following data: amino acid sites in the protein of interest, the number of unique epitopes at each site (determined using epitopefinder), and
the average number of mutations that occur at that site (calculated in the previous step).

aminoacid_site  number_unique_epitopes  average_human_mutations  average_swine_mutations
1               0                       1                        0
2               3                       2                        1
3               1                       6                        4

f = sum(numberepitopes*mutations)/sum(mutations)
fhuman = (0*1 + 3*2 + 1*3)/(1 + 2 + 6) = 1
fswine = (0*0 + 3*1 + 1*4)/(1 + 1 + 4) = 7/6

We record this as the actual value. In order to determine if there is a signficant difference between human and swine, we create a null distribution. We shuffle the values of number_unique_epitopes and recalculate the f values for human and swine. We record the actual f values and the randomized f values. 

Input files
------------
*``typeavemutationpersite.csv`` : file with average mutation per amino acid site, type is tree or trunk
*``combinedepitopesbysite.csv`` : file with the number of epitopes at each sight

Output files
---------------
*``randomdistributionsummary.csv`` : summary file with actual f values, located in /plots/cd8/type where type is tree or trunk
*``cd8typerandomdistribution.csv`` : file with randomized f values for human and swine, located in human/protein/, protein is NP or M1, type is tree or trunk

2. Calculate signficance of differences in f distributions. We look for evidence of adaptive evolution several ways: we take the ratio of fhuman/fswine, ftrunk/ftree, (ftrunk/ftree)human/(ftrunk/ftree)swine. We calculate a 1-sided p-value for the actual ratio being greater than the null distribution. We make violin plots for the three ratios comparing the actual value to the null distribution. This analysis is done for M1 and NP with the script ``fplot.py``.

Input files
------------
*``cd8typerandomdistribution.csv`` : file with randomized f values for human and swine, located in human/protein/, protein is NP or M1, type is tree or trunk

Output files
---------------
*``testratiofhumanswine.pdf``: violin plot of ratio fhuman/fswine, located in plots/cd8/
*``testratiotrunktree.pdf`` : violin plot of ratio ftrunk/fhuman, located in plots/cd8/
*``testratiotrunktreehumanswine.pdf`` : violin plot of ratio (ftrunk/ftree)human/(ftrunk/ftree)swine, located in plots/cd8/
*``summarypvalues.csv`` : csv file containing all of the p values for fhuman/fswine,ftrunk/fhuman,(ftrunk/ftree)human/(ftrunk/ftree)swine for M1 and NP, located in plots/cd8/

.. _`Neumann et al 2009`: http://www.nature.com/nature/journal/v459/n7249/full/nature08157.html
.. _`Influenza Virus Resource`: http://www.ncbi.nlm.nih.gov/genomes/FLU/FLU.html
.. _`RAxML`: http://sco.h-its.org/exelixis/web/software/raxml/
.. _`Path-O-Gen`: http://tree.bio.ed.ac.uk/software/pathogen/
.. _`Krasnitz et al 2008`: http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2519662/
.. _`Python`: https://www.python.org/
.. _`Biopython`: http://biopython.org/wiki/Main_Page
.. _`Path-O-Gen`: http://tree.bio.ed.ac.uk/software/pathogen/
.. _`RAxML`: http://sco.h-its.org/exelixis/web/software/raxml/
.. _`EMBOSS needle`: http://www.ebi.ac.uk/Tools/psa/emboss_needle/
.. _`dos Reis et al 2009`: http://www.ncbi.nlm.nih.gov/pubmed/19787384
.. _`Bloom lab`: http://research.fhcrc.org/bloom/en.html
.. _`epitopefinder`: https://github.com/jbloom/epitopefinder
